<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:customCtl="clr-namespace:DesktopUniversalCustomControl.CustomComponent">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <!--TooggleButton 删除按钮-->
    <Style x:Key="delToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="loaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" 
                            CornerRadius="0" Background="Transparent" RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                            </TransformGroup>
                        </Border.RenderTransform>
                        <Canvas VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Canvas.RenderTransform>
                                <RotateTransform Angle="45"></RotateTransform>
                            </Canvas.RenderTransform>
                            <Path Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=ToggleButtonBackground}">
                                <Path.Data>
                                    <EllipseGeometry  RadiusX="12" RadiusY="12"></EllipseGeometry>
                                </Path.Data>
                            </Path>
                            <Path Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=StrokeLineColor}" StrokeThickness="2">
                                <Path.Data>
                                    <LineGeometry StartPoint="-12,0" EndPoint="12,0"></LineGeometry>
                                </Path.Data>
                            </Path>
                            <Path Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=StrokeLineColor}" StrokeThickness="2">
                                <Path.Data>
                                    <LineGeometry StartPoint="0,-12" EndPoint="0,12"></LineGeometry>
                                </Path.Data>
                            </Path>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Click">
                            <BeginStoryboard x:Name="defaultStoryBoard" Storyboard="{StaticResource loaded}"/>
                        </EventTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="Hand"></Setter>
                            <Setter Property="BitmapEffect">
                                <Setter.Value>
                                    <DropShadowBitmapEffect ShadowDepth="1" Softness="0.5" Opacity="0.6" Color="Gray"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TooggleButton 倒三角-->
    <Style x:Key="toggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="loaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                            </TransformGroup>
                        </Border.RenderTransform>
                        <Border.CornerRadius>
                            <CornerRadius TopRight="5" BottomRight="5"></CornerRadius>
                        </Border.CornerRadius>
                        <Path Data="M 0,0 L 30,0 L 15,15 Z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:CustomComboBox},Path=ToggleButtonBackground}" 
                              HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path.RenderTransform>
                                <ScaleTransform ScaleX="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=ToggleButtonSize}" 
                                                ScaleY="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=ToggleButtonSize}" 
                                                CenterX="20" CenterY="8"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" Value="0" TargetName="border"></Setter>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="defaultStoryBoard" Storyboard="{StaticResource loaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="defaultStoryBoard"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Effect" Value="{DynamicResource CustomShadowDepth2}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MutilComboBox子项操作按钮-->
    <Style x:Key="button" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="loaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(ScaleTransform.ScaleX)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(ScaleTransform.ScaleY)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="TemplateRoot" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform X="0" Y="0"></TranslateTransform>
                                <RotateTransform Angle="0"></RotateTransform>
                                <SkewTransform AngleX="0" AngleY="0"></SkewTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Mode=Self}}">
                            <Grid>
                                <Border x:Name="border" CornerRadius="5" Background="{TemplateBinding Background}">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </Grid>
                        </AdornerDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <!--<Setter Property="Effect" Value="{DynamicResource CustomShadowDepth1}"/>-->
                            <Setter Property="Background" Value="{DynamicResource AssistantBackgroundColor}"/>
                        </Trigger>
                        <!--<Trigger Property="IsFocused" Value="true">
                            <Setter Property="Effect" Value="{DynamicResource CustomShadowDepth1}"/>
                        </Trigger>-->
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="defaultStoryboardLoaed" Storyboard="{StaticResource loaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="defaultStoryboardLoaed"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ItemContainer" TargetType="{x:Type ListViewItem}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=Foreground}"/>
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=Height}"/>
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=Width}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="border" BorderThickness="0,1,0,0" BorderBrush="White"
                            Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=ComboBoxListBackground}">
                        <Grid VerticalAlignment="Center" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*" />
                                <ColumnDefinition Width="2*" />
                            </Grid.ColumnDefinitions>
                            <Label x:Name="lb" Grid.Column="0" Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content}" 
                                               Foreground="{TemplateBinding Foreground}" Background="Transparent"
                                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                               Padding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=Padding}"/>
                            <customCtl:CustomCheckBox x:Name="cb" Grid.Column="1" BorderBrush="White" FillBrush="White"
                                      Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},
                                      Path=CheckBoxItemTypeIndex,Converter={StaticResource BooleanToVisibilityConverter}}"
                                      IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(customCtl:MutilComboBoxControl.IsChecked),Mode=TwoWay}"
                                      VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <Button x:Name="btn" Grid.Column="1" Focusable="False"
                                    Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=ItemButtonContent}" 
                                    Style="{StaticResource button}" ClickMode="Release"
                                    Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},
                                    Path=ButtonItemTypeIndex,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                            <Image x:Name="img" Grid.Column="1" 
                                   Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=ItemImageSource}" 
                                   Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},
                                   Path=ImageItemTypeIndex,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=customCtl:MutilComboBoxControl},Path=ComboxBoxItemMouseOverBackground}" TargetName="border"></Setter>
                        </Trigger>
                        <Trigger Property="customCtl:MutilComboBoxControl.IsDeletedContent" Value="True">
                            <Setter Property="IsChecked" Value="false" TargetName="cb"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true" SourceName="btn">
                            <Setter Property="customCtl:MutilComboBoxControl.IsDeleteButtonPressed" Value="True"/>
                        </Trigger>

                        <!--默认 整个子项有作用-->
                        <Trigger Property="customCtl:MutilComboBoxControl.SelectedType" Value="MutilItem">
                            <Setter Property="IsChecked" TargetName="cb"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=IsSelected,Mode=TwoWay}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="customCtl:MutilComboBoxControl.SelectedType" Value="MutilItem"></Condition>
                                <Condition Property="IsSelected" Value="true"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="customCtl:MutilComboBoxControl.IsChecked" Value="True"/>
                            <!--<Setter Property="Background" Value="Red" TargetName="border"/>-->
                        </MultiTrigger>

                        <!--只有CheckBox有作用-->
                        <Trigger Property="customCtl:MutilComboBoxControl.SelectedType" Value="OnlyCheckBox">
                            <Setter Property="IsChecked" TargetName="cb"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(customCtl:MutilComboBoxControl.IsChecked),Mode=TwoWay}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="customCtl:MutilComboBoxControl.SelectedType" Value="OnlyCheckBox"></Condition>
                                <Condition Property="IsSelected" Value="true"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="Green" TargetName="border"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ChanceMutilComboBoxControl" TargetType="{x:Type customCtl:MutilComboBoxControl}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundColor}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="ItemsSource" Value="{x:Null}" />
        <Setter Property="IsEditable" Value="False"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="8,0,0,0"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ComboBoxListBackground" Value="{DynamicResource PrimaryBackgroundColor}"/>
        <Setter Property="ComboxBoxItemMouseOverBackground" Value="{DynamicResource AssistantBackgroundColor}"/>
        <Setter Property="StrokeLineColor" Value="White" />
        <Setter Property="ToggleButtonBackground" Value="Yellow"/>
        <Setter Property="ToggleButtonSize" Value="0.8"/>
        <Setter Property="customCtl:MutilComboBoxControl.IsChecked" Value="False"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type customCtl:MutilComboBoxControl}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="popupLoaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" ToolTip="{TemplateBinding ToolTip}">
                        <Grid x:Name="grid" SnapsToDevicePixels="True" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*"/>
                                <ColumnDefinition Width="1*" MaxWidth="50"/>
                                <ColumnDefinition Width="2*" MaxWidth="50"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="PART_PlaceHolder" Text="{TemplateBinding TextPlaceHolder}" Foreground="LightGray" Opacity="0"
                                       TextAlignment="Left" FontSize="{TemplateBinding FontSize}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}"/>
                            <ToggleButton x:Name="delToggleButton" Grid.Column="1" Style="{StaticResource delToggleButton}"
                                          IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(customCtl:MutilComboBoxControl.IsDeletedContent),Mode=TwoWay}"
                                          Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=AddDeleteFun,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                            <ToggleButton x:Name="toggle" Grid.Column="2" Style="{StaticResource toggleButton}" Focusable="False" ClickMode="Press"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <TextBox x:Name="PART_EditableTextBox" BorderThickness="0" VerticalAlignment="Center" Focusable="True"
                                     Background="Transparent" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False"
                                     Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Text,Mode=TwoWay}"
                                     IsReadOnly="{TemplateBinding IsReadOnly}" Padding="{TemplateBinding Padding}"/>
                            <Popup x:Name="PART_Popup" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom">
                                <Grid x:Name="TemplateRoot" RenderTransformOrigin="0.5,0.5">
                                    <Grid.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                                        </TransformGroup>
                                    </Grid.RenderTransform>
                                    <Rectangle Width="{Binding TemplatedParent}" Height="{Binding TemplatedParent}" 
                                               Fill="{StaticResource {x:Static SystemColors.ActiveBorderBrushKey}}"/>
                                    <Border x:Name="dropDownBorder" CornerRadius="5" Margin="-2,-1,0,0"
                                            MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderThickness="0"
                                            MinWidth="{Binding ElementName=grid,Path=Width}">
                                        <ListView x:Name="dropDownListView" SelectionMode="Multiple" ItemsSource="{TemplateBinding ItemsSource}" BorderThickness="0"
                                                  ItemContainerStyle="{StaticResource ItemContainer}"
                                                  ItemTemplate="{TemplateBinding ItemTemplate}"
                                                  MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                                  MinWidth="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ActualWidth}"/>
                                        <!--ItemsSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:MutilComboBoxControl.ListItemsSource),Mode=TwoWay}"-->
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Opacity" Value="0.6" TargetName="PART_PlaceHolder"></Setter>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="CaretBrush" Value="white" TargetName="PART_EditableTextBox"/>
                            <Setter Property="IsHitTestVisible" Value="True" TargetName="PART_EditableTextBox"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true" SourceName="toggle">
                            <Setter Property="CornerRadius" Value="5,5,0,0" TargetName="border"></Setter>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="popupLoadedStoryBoard" Storyboard="{StaticResource popupLoaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="popupLoadedStoryBoard"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type customCtl:MutilComboBoxControl}" TargetType="{x:Type customCtl:MutilComboBoxControl}" BasedOn="{StaticResource ChanceMutilComboBoxControl}">
        
    </Style>
    
</ResourceDictionary>