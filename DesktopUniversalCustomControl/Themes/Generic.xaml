<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:msgDlg="clr-namespace:DesktopUniversalCustomControl.CustomView.MsgDlg"
    xmlns:media="clr-namespace:DesktopUniversalCustomControl.CustomView.MediaView"
    xmlns:local="clr-namespace:DesktopUniversalCustomControl.CustomComponent"
    xmlns:exposed="clr-namespace:DesktopUniversalCustomControl.ExposedMethod"
    xmlns:converter="clr-namespace:DesktopUniversalCustomControl.Service.Common">

    <ResourceDictionary.MergedDictionaries>
        <!--<ResourceDictionary Source="/DesktopUniversalCustomControl;component/Resource/Dictionary/ControlDictionary.xaml"/>-->
        <ResourceDictionary Source="/DesktopUniversalCustomControl;component/Resource/Dictionary/IconDictionary.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converter:ChartTypeToVisibility x:Key="ChartTypeToVisibility"/>
    <converter:MediaPlayerStateToVisibility x:Key="MediaPlayerStateToVisibility"/>
    <converter:DoubleToInt x:Key="DoubleToInt"/>

    <SolidColorBrush x:Key="foregroundColor" Color="BlueViolet"/>
    <LinearGradientBrush x:Key="backgroundColor">
        <GradientStop Offset="0.3" Color="LightSalmon"></GradientStop>
        <GradientStop Offset="0.6" Color="Orange"></GradientStop>
        <GradientStop Offset="0.9" Color="OrangeRed"></GradientStop>
    </LinearGradientBrush>
    <DropShadowEffect x:Key="effect" BlurRadius="10" ShadowDepth="1" Direction="90" Color="Gray"/>
    <OuterGlowBitmapEffect x:Key="bitmapEffect" GlowColor="DarkBlue" GlowSize="10" Opacity="0.7"/>

    <!--ToolTip-->
    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
        <Setter Property="MinWidth" Value="50"></Setter>
        <Setter Property="MinHeight" Value="30"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Background" Value="{StaticResource backgroundColor}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"
                            CornerRadius="5" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--开关-->
    <Style x:Key="SwitchFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="10,0,0,0" SnapsToDevicePixels="true" Stroke="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="2" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TooggleButton 倒三角-->
    <Style x:Key="toggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="loaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                            </TransformGroup>
                        </Border.RenderTransform>
                        <Border.CornerRadius>
                            <CornerRadius TopRight="5" BottomRight="5"></CornerRadius>
                        </Border.CornerRadius>
                        <Path Data="M 0,0 L 30,0 L 15,15 Z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomComboBox},Path=ToggleButtonBackground}" HorizontalAlignment="Center" VerticalAlignment="Center"></Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" Value="0" TargetName="border"></Setter>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="defaultStoryBoard" Storyboard="{StaticResource loaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="defaultStoryBoard"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="Hand"></Setter>
                            <Setter Property="BitmapEffect">
                                <Setter.Value>
                                    <DropShadowBitmapEffect ShadowDepth="1" Softness="0.5" Opacity="0.6" Color="Gray"></DropShadowBitmapEffect>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TooggleButton 删除按钮-->
    <Style x:Key="delToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="loaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                            </TransformGroup>
                        </Border.RenderTransform>
                        <Canvas VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Canvas.RenderTransform>
                                <RotateTransform Angle="45"></RotateTransform>
                            </Canvas.RenderTransform>
                            <Path Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},Path=ToggleButtonBackground}">
                                <Path.Data>
                                    <EllipseGeometry  RadiusX="12" RadiusY="12"></EllipseGeometry>
                                </Path.Data>
                            </Path>
                            <Path Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},Path=StrokeLineColor}" StrokeThickness="2">
                                <Path.Data>
                                    <LineGeometry StartPoint="-12,0" EndPoint="12,0"></LineGeometry>
                                </Path.Data>
                            </Path>
                            <Path Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},Path=StrokeLineColor}" StrokeThickness="2">
                                <Path.Data>
                                    <LineGeometry StartPoint="0,-12" EndPoint="0,12"></LineGeometry>
                                </Path.Data>
                            </Path>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" Value="0" TargetName="border"></Setter>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="defaultStoryBoard" Storyboard="{StaticResource loaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="defaultStoryBoard"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="Hand"></Setter>
                            <Setter Property="BitmapEffect">
                                <Setter.Value>
                                    <DropShadowBitmapEffect ShadowDepth="1" Softness="0.5" Opacity="0.2" Color="Gray"></DropShadowBitmapEffect>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Combobox多项选择子项按钮-->
    <Style x:Key="button" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource foregroundColor}"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="loaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(ScaleTransform.ScaleX)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(ScaleTransform.ScaleY)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="TemplateRoot" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform X="0" Y="0"></TranslateTransform>
                                <RotateTransform Angle="0"></RotateTransform>
                                <SkewTransform AngleX="0" AngleY="0"></SkewTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Mode=Self}}">
                            <Grid>
                                <Border x:Name="border" CornerRadius="5" Background="{StaticResource backgroundColor}">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </Grid>
                        </AdornerDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Effect" Value="{StaticResource effect}"></Setter>
                            <Setter Property="Background" Value="{StaticResource backgroundColor}"></Setter>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Effect" Value="{StaticResource effect}"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="defaultStoryboardLoaed" Storyboard="{StaticResource loaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="defaultStoryboardLoaed"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--PasswordBox-->
    <Style x:Key="passwordbox" TargetType="{x:Type PasswordBox}">
        <Setter Property="FontFamily" Value="Times New Roman"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomPasswordBox},Path=CornerRadius}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="30" MaxWidth="40"/>
                            </Grid.ColumnDefinitions>
                            <ScrollViewer x:Name="PART_ContentHost" UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Focusable="False"
                                          ScrollViewer.CanContentScroll="True" Foreground="{TemplateBinding Foreground}"/>
                            <TextBlock x:Name="PART_PlaceHolder" Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomPasswordBox},Mode=TwoWay,Path=PasswordPlaceHolder}" 
                                       Foreground="LightGray" FontSize="14" Visibility="Collapsed" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
                            <local:CustomTextControl x:Name="visiblePassword" Visibility="Collapsed"
                                                         Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomPasswordBox},Path=Password,UpdateSourceTrigger=PropertyChanged}" 
                                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                         Background="Transparent" InputMethod.IsInputMethodEnabled="False" 
                                                         BorderThickness="0" Focusable="True" MaxLength="{TemplateBinding MaxLength}"
                                                         Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomPasswordBox},Path=Foreground}"/>
                            <local:CustomIconControl x:Name="eye" Grid.Column="1" Kind="Lock" VerticalAlignment="Center" Foreground="SaddleBrown" Background="White"
                                                         IconSizePercent="{TemplateBinding exposed:CustomPasswordBoxhelper.IconSizePercent}"
                                                         Visibility="{TemplateBinding exposed:CustomPasswordBoxhelper.IsShowIcon,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="exposed:CustomPasswordBoxhelper.Password" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_PlaceHolder"></Setter>
                        </Trigger>
                        <Trigger Property="exposed:CustomPasswordBoxhelper.Password" Value="">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_PlaceHolder"></Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True" SourceName="eye">
                            <Setter Property="exposed:CustomPasswordBoxhelper.IsShowPassword" Value="True"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_ContentHost"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="visiblePassword"></Setter>
                            <Setter Property="Kind" Value="Eye" TargetName="eye"></Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False" SourceName="eye">
                            <Setter Property="exposed:CustomPasswordBoxhelper.IsShowPassword" Value="False"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_ContentHost"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="visiblePassword"></Setter>
                            <Setter Property="Kind" Value="Lock" TargetName="eye"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--TextBlock-->
    <Style x:Key="textBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="50"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="SaddleBrown"/>
        <Setter Property="FontFamily" Value="微软雅黑"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Margin" Value="-25,0,0,0"/>
    </Style>





    <!--MessageBoxView-->
    <Style TargetType="{x:Type msgDlg:MessageDialog}">
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"></Setter>
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type msgDlg:MessageDialog}">
                    <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"  CornerRadius="10"
                                    BorderBrush="{StaticResource foregroundColor}" BorderThickness="0">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="45"></RowDefinition>
                                <RowDefinition />
                                <RowDefinition Height="60"></RowDefinition>
                            </Grid.RowDefinitions>

                            <Border Grid.Row="0" Background="{StaticResource backgroundColor}" CornerRadius="10,10,0,0">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*"></ColumnDefinition>
                                        <ColumnDefinition Width="8*"></ColumnDefinition>
                                        <ColumnDefinition Width="1*"></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                    <local:CustomIconControl Kind="Message" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center"></local:CustomIconControl>
                                    <TextBlock Grid.Column="1" Text="{Binding caption}" Foreground="White" FontSize="16" FontFamily="正楷" HorizontalAlignment="Left" VerticalAlignment="Center"></TextBlock>
                                    <local:CustomIconControl Grid.Column="2" Kind="CloseCircle" ForceCursor="True" Foreground="White" Background="Green" 
                                                             Width="30" Height="30" ToolTip="关闭">
                                        <behaviors:Interaction.Triggers>
                                            <behaviors:EventTrigger EventName="Click">
                                                <behaviors:InvokeCommandAction Command="{Binding CloseWindowCommand}" CommandParameter="{Binding ElementName=msgWindow}"></behaviors:InvokeCommandAction>
                                            </behaviors:EventTrigger>
                                        </behaviors:Interaction.Triggers>
                                    </local:CustomIconControl>
                                </Grid>
                            </Border>

                            <Grid Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="2*"></ColumnDefinition>
                                    <ColumnDefinition Width="1*"></ColumnDefinition>
                                    <ColumnDefinition Width="5*"></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <local:CustomIconControl x:Name="hintText" Grid.Column="1" Kind="{Binding msgIcon}" Visibility="Collapsed"
                                                         Margin="0,0,0,0" IconSizePercent="1" Foreground="{StaticResource foregroundColor}"
                                                         VerticalAlignment="Center" HorizontalAlignment="Left"/>
                                <TextBlock Grid.Column="2" Text="{Binding indicateText}" TextWrapping="Wrap" VerticalAlignment="Center"
                                           Margin="15,0,0,0" Foreground="{StaticResource foregroundColor}" FontSize="16"></TextBlock>
                            </Grid>
                            
                            <Grid Grid.Row="2" x:Name="singleGrid" HorizontalAlignment="Center">
                                <Button Content="确定" Width="80" Height="35" Style="{StaticResource button}"
                                        Command="{Binding SureCommand}" CommandParameter="{Binding ElementName=msgWindow}"/>
                            </Grid>

                            <Grid Grid.Row="2" x:Name="moreGrid" Visibility="Collapsed">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*"></ColumnDefinition>
                                    <ColumnDefinition Width="1*"></ColumnDefinition>
                                    <ColumnDefinition Width="1*"></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <Button Grid.Column="0" Content="是(Y)" Width="80" Height="35" Style="{StaticResource button}" x:Name="yes"
                                        Command="{Binding YesCommand}" CommandParameter="{Binding ElementName=msgWindow}"/>
                                <Button Grid.Column="1" Content="否(N)" Width="80" Height="35" Style="{StaticResource button}"
                                        Command="{Binding NoCommand}" CommandParameter="{Binding ElementName=msgWindow}"/>
                                <Button Grid.Column="2" Content="取消(C)" Width="80" Height="35" Style="{StaticResource button}"
                                        Command="{Binding CancelCommand}" CommandParameter="{Binding ElementName=msgWindow}"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="MessageButtonResult" Value="Single">
                            <Setter Property="Visibility" Value="Visible" TargetName="singleGrid"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="moreGrid"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="hintText"/>
                        </Trigger>-->
                        <Trigger Property="MessageButtonResult" Value="More">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="singleGrid"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="moreGrid"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="hintText"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MediaPlayerView-->
    <Style TargetType="{x:Type local:MediaPlayerView}">
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Header="作者：Chance"/>
                    <MenuItem Header="版本：V1.0.0"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MediaPlayerView}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <media:UserMediaView  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ChartControlView-->
    <Style TargetType="{x:Type local:ChartControlView}">
        <Setter Property="StrokeCoordinate" Value="Red"/>
        <Setter Property="StrokeThicknessCoordinate" Value="2"/>
        <Setter Property="XAxisDescription" Value="月份(年)"/>
        <Setter Property="YAxisDescription" Value="产量(kg)"/>
        <Setter Property="XAxisMargin" Value="0"/>
        <Setter Property="YAxisMargin" Value="-60,-5,0,0"/>
        <Setter Property="XTicksMargin" Value="-25,0,0,0"/>
        <Setter Property="YTicksMargin" Value="-40,-8,0,0"/>
        <Setter Property="ChartType" Value="PolyLine"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ChartControlView}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="roateStoryboard">
                            <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="Fangraph"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="360"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="TemplateRoot">
                            <Canvas x:Name="coordinateSystem">
                                <local:CoordinateSystem x:Name="coordinate" CenterPoint="{TemplateBinding CenterPoint}" XEndPoint="{TemplateBinding XEndPoint}" YEndPoint="{TemplateBinding YEndPoint}"
                                                    XCoordinateTicks="{TemplateBinding XCoordinateTicks}" YCoordinateTicks="{TemplateBinding YCoordinateTicks}"
                                                    Stroke="{TemplateBinding StrokeCoordinate}" StrokeThickness="{TemplateBinding StrokeThicknessCoordinate}"/>
                                <TextBlock Text="{TemplateBinding XAxisDescription}" FontSize="14" FontWeight="Bold" Foreground="White" Margin="{TemplateBinding XAxisMargin}"
                                           Canvas.Left="{Binding ElementName=coordinate,Path=XEndPoint.X}"
                                           Canvas.Top="{Binding ElementName=coordinate,Path=XEndPoint.Y}"/>
                                <TextBlock Text="{TemplateBinding YAxisDescription}" FontSize="14" FontWeight="Bold" Foreground="White" Margin="{TemplateBinding YAxisMargin}"
                                           Canvas.Left="{Binding ElementName=coordinate,Path=YEndPoint.X}"
                                           Canvas.Top="{Binding ElementName=coordinate,Path=YEndPoint.Y}"/>
                            </Canvas>
                            <!--X轴刻度描述-->
                            <Canvas x:Name="xTicks">
                                <!--<TextBlock Canvas.Left="{Binding ElementName=coordinate,Path=XTicks[0].X}" Canvas.Top="{Binding ElementName=coordinate,Path=XTicks[0].Y}" 
                                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=XTickDescription[0]}" Style="{StaticResource textBlock}"
                                           Margin="{TemplateBinding XTicksMargin}"/>-->
                            </Canvas>
                            <!--Y轴刻度描述-->
                            <Canvas x:Name="yTicks">
                                <!--<TextBlock Canvas.Left="{Binding ElementName=coordinate,Path=YTicks[0].Y}" Canvas.Top="{Binding ElementName=coordinate,Path=YTicks[0].Y}" 
                                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=YTickDescription[0]}" Style="{StaticResource textBlock}"
                                           Margin="{TemplateBinding YTicksMargin}"/>-->
                            </Canvas>
                            <!--画图-->
                            <Canvas x:Name="drawChart">
                                <Polyline x:Name="PolyLine" Points="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ChartNewDataCollection}" 
                                          Stroke="{TemplateBinding StrokeCoordinate}" StrokeThickness="{TemplateBinding StrokeThicknessCoordinate}"
                                          Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ChartType,
                                                        Converter={StaticResource ChartTypeToVisibility},ConverterParameter=PolyLineMap}"/>
                                
                                <Path x:Name="Histogram" Fill="{TemplateBinding StrokeCoordinate}" 
                                      Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ChartType,
                                                  Converter={StaticResource ChartTypeToVisibility},ConverterParameter=HistogramMap}"/>
                                <Canvas x:Name="otherHistogram" Visibility="{Binding ElementName=Histogram,Path=Visibility}"/>

                                <Canvas x:Name="Fangraph" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ChartType,
                                                                       Converter={StaticResource ChartTypeToVisibility},ConverterParameter=FangraphMap}">
                                    <Canvas.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <RotateTransform CenterX="300" CenterY="300"/>
                                            <SkewTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Canvas.RenderTransform>
                                </Canvas>
                                <!--<Canvas x:Name="otherFangraph" Visibility="{Binding ElementName=Fangraph,Path=Visibility}"/>-->                                
                            </Canvas>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Loaded">
                            <BeginStoryboard x:Name="startRoateStoryboard" Storyboard="{StaticResource roateStoryboard}"/>
                        </EventTrigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Fangraph">
                            <Trigger.EnterActions>
                                <PauseStoryboard BeginStoryboardName="startRoateStoryboard"></PauseStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False" SourceName="Fangraph">
                            <Trigger.EnterActions>
                                <ResumeStoryboard BeginStoryboardName="startRoateStoryboard"></ResumeStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--ImageButton-->
    <Style TargetType="{x:Type local:ImageButton}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="Salmon"/>
        <Setter Property="OverBackground" Value="{StaticResource backgroundColor}"/>
        <Setter Property="BorderBrush" Value="BlueViolet"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="ToolTip" Value="ImageButton"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ImageButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="loaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(ScaleTransform.ScaleX)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(ScaleTransform.ScaleY)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="TemplateRoot" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform X="0" Y="0"></TranslateTransform>
                                <RotateTransform Angle="0"></RotateTransform>
                                <SkewTransform AngleX="0" AngleY="0"></SkewTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding Background}" ToolTip="{TemplateBinding ToolTip}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Image Source="{TemplateBinding ImageButtonSource}" 
                                       Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ImageWidth}" 
                                       Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ImageHeight}"
                                       Visibility="{TemplateBinding ImageVisibility}"
                                       Margin="0,0,10,0"/>
                                <Path Data="{TemplateBinding GeometryData}" Fill="{TemplateBinding Foreground}"
                                      Stroke="{TemplateBinding Background}" StrokeThickness="4" Margin="0,0,10,0"/>
                                <TextBlock Text="{TemplateBinding ImageButtonContent}" VerticalAlignment="Center"></TextBlock>
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<EventTrigger RoutedEvent="MouseLeftButtonDown">
                            <BeginStoryboard>
                                <Storyboard>
                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsPressed">
                                        <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"></DiscreteBooleanKeyFrame>
                                        <DiscreteBooleanKeyFrame KeyTime="0:0:0.1" Value="False"></DiscreteBooleanKeyFrame>
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseDoubleClick">
                            <BeginStoryboard>
                                <Storyboard>
                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsPressed">
                                        <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"></DiscreteBooleanKeyFrame>
                                        <DiscreteBooleanKeyFrame KeyTime="0:0:0.1" Value="False"></DiscreteBooleanKeyFrame>
                                    </BooleanAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Effect" Value="{StaticResource effect}"></Setter>
                            <Setter Property="Background" TargetName="border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=OverBackground}"></Setter>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Effect" Value="{StaticResource effect}"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="DarkGray" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="defaultStoryboardLoaed" Storyboard="{StaticResource loaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="defaultStoryboardLoaed"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--SwitchControl-->
    <Style TargetType="{x:Type local:SwitchControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SwitchContent" Value="关" />
        <Setter Property="CornerRadius" Value="15"/>
        <Setter Property="SwitchOpenBackground" Value="#FF0000"/>
        <Setter Property="SwicthCloseBackground" Value="#DADADA"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SwitchControl}">
                    <!--<ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardIsChecked">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="CheckFlag">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="80"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames> 
                        </Storyboard>
                        <Storyboard x:Key="StoryboardIsCheckedOff">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="CheckFlag">
                                <EasingDoubleKeyFrame KeyTime="0" Value="80"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>-->
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="True" ToolTip="{TemplateBinding ToolTip}">
                        <BulletDecorator.Bullet>
                            <Border x:Name="ForegroundPanel" BorderThickness="1" CornerRadius="{TemplateBinding CornerRadius}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                                <Canvas>
                                    <Border x:Name="CheckFlag" Width="{TemplateBinding Height}" Height="{TemplateBinding Height}" Background="White" CornerRadius="{Binding ElementName=CheckFlag,Path=Height}"
                                            VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" BorderThickness="1">
                                        <Border.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <RotateTransform/>
                                                <SkewTransform/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Border.RenderTransform>
                                        <Border.Effect>
                                            <DropShadowEffect BlurRadius="10" ShadowDepth="1" Direction="90" Color="Gray" Opacity="0.9"></DropShadowEffect>
                                        </Border.Effect>
                                        <TextBlock Text="{TemplateBinding SwitchContent}" Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}" 
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                </Canvas>
                            </Border>
                        </BulletDecorator.Bullet>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource SwitchFocusVisual}"></Setter>
                            <Setter Property="Padding" Value="4,0,0,0"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ForegroundPanel" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=SwitchOpenBackground}"/>
                            <Setter Property="SwitchContent" Value="开" />
                            <!--<Trigger.EnterActions>
                                <BeginStoryboard x:Name="BeginStoryboardCheckedTrue" Storyboard="{StaticResource StoryboardIsChecked}" />
                                <RemoveStoryboard BeginStoryboardName="BeginStoryboardCheckedFalse" />
                            </Trigger.EnterActions>-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="ForegroundPanel" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=SwicthCloseBackground}"/>
                            <!--<Trigger.EnterActions>
                                <BeginStoryboard x:Name="BeginStoryboardCheckedFalse" Storyboard="{StaticResource StoryboardIsCheckedOff}" />
                                <RemoveStoryboard BeginStoryboardName="BeginStoryboardCheckedTrue" />
                            </Trigger.EnterActions>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--QRCodeControl-->
    <Style TargetType="{x:Type local:QRCodeControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:QRCodeControl}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" ToolTip="{TemplateBinding ToolTip}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Image Source="{TemplateBinding QRCodeImage}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CustomComboBox-->
    <Style TargetType="{x:Type local:CustomComboBox}">
        <!--CustomComboBox背景色-->
        <Setter Property="Background" Value="{StaticResource backgroundColor}"></Setter>
        <!--CustomComboBox字体颜色-->
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="6,0,0,0"></Setter>
        <Setter Property="CornerRadius" Value="5"></Setter>
        <Setter Property="ComboBoxListBackground" Value="LightSalmon"></Setter>
        <Setter Property="ComboxBoxItemMouseOverBackground" Value="Salmon"></Setter>
        <Setter Property="ToggleButtonBackground" Value="Red"></Setter>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type local:CustomComboBoxItem}">
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomComboBox},Path=Foreground}"/>
                    <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Height}"></Setter>
                    <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomComboBox},Path=Width}"></Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type local:CustomComboBoxItem}">
                                <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomComboBox},Path=ComboBoxListBackground}">
                                    <Label Content="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" Height="{TemplateBinding Height}" Foreground="{TemplateBinding Foreground}" 
                                    VerticalContentAlignment="Center" BorderThickness="0,0,0,1" BorderBrush="WhiteSmoke"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomComboBox},Path=ComboxBoxItemMouseOverBackground}" TargetName="border"></Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomComboBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="popupLoaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" ToolTip="{TemplateBinding ToolTip}">
                        <Grid x:Name="grid" SnapsToDevicePixels="True" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*"/>
                                <ColumnDefinition Width="3*" MaxWidth="50"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="content" Content="{TemplateBinding SelectionBoxItem}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
                            <ToggleButton x:Name="toggle" Grid.Column="1" Grid.ColumnSpan="2" Style="{StaticResource toggleButton}" Focusable="False" ClickMode="Press"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" BorderThickness="0" VerticalAlignment="Center" Focusable="True"
                                     Background="Transparent" Foreground="{TemplateBinding Foreground}"
                                     IsReadOnly="{TemplateBinding IsReadOnly}" Padding="{TemplateBinding Padding}"/>
                            <Popup x:Name="PART_Popup" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" PopupAnimation="None" Placement="Bottom">
                                <Grid x:Name="TemplateRoot" Margin="50,0,50,50" RenderTransformOrigin="0.5,0.5">
                                    <Grid.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                                        </TransformGroup>
                                    </Grid.RenderTransform>
                                    <Rectangle Width="{Binding TemplatedParent}" Height="{Binding TemplatedParent}" Fill="{StaticResource {x:Static SystemColors.ActiveBorderBrushKey}}" RadiusX="5" RadiusY="5">
                                        <Rectangle.Effect>
                                            <DropShadowEffect BlurRadius="10" ShadowDepth="1" Direction="90" Color="Gray" Opacity="0.8"></DropShadowEffect>
                                        </Rectangle.Effect>
                                    </Rectangle>
                                    <Border x:Name="dropDownBorder" CornerRadius="5" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ElementName=grid,Path=ActualWidth}">
                                        <ScrollViewer x:Name="dropDownScrollViewer" CanContentScroll="True" SnapsToDevicePixels="True" 
                                                  VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"></StackPanel>
                                            <!--<ItemsPresenter x:Name="itemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"></ItemsPresenter>-->
                                        </ScrollViewer>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true" SourceName="toggle">
                            <Setter Property="CornerRadius" Value="5,5,0,0" TargetName="border"></Setter>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="popupLoadedStoryBoard" Storyboard="{StaticResource popupLoaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="popupLoadedStoryBoard"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"></Setter>
                            <Setter Property="Content" Value="{x:Null}" TargetName="content"></Setter>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true" SourceName="PART_EditableTextBox">
                            <!--光标的颜色-->
                            <Setter Property="CaretBrush" Value="white" TargetName="PART_EditableTextBox"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
  
    <Style x:Key="ItemContainer" TargetType="{x:Type ListBoxItem}">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},Path=Foreground}"/>
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},Path=Height}"/>
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},Path=Width}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="border" BorderThickness="0,0,0,1" BorderBrush="Yellow"
                            Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},Path=ComboBoxListBackground}">
                        <Grid VerticalAlignment="Center" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*" />
                                <ColumnDefinition Width="2*" />
                            </Grid.ColumnDefinitions>
                            <Label x:Name="lb" Grid.Column="0" Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content}" 
                                               Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="Transparent"
                                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <CheckBox x:Name="cb" Grid.Column="1" 
                                      Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},
                                      Path=CheckBoxItemTypeIndex,Converter={StaticResource BooleanToVisibilityConverter}}"
                                      IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:MutilComboBoxControl.IsChecked),Mode=TwoWay}"
                                      VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <Button x:Name="btn" Grid.Column="1" Focusable="False"
                                    Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},Path=ItemButtonContent}" 
                                    Style="{StaticResource button}" ClickMode="Release"
                                    Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},
                                              Path=ButtonItemTypeIndex,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                            <Image x:Name="img" Grid.Column="1" 
                                   Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},Path=ItemImageSource}" 
                                   Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},
                                   Path=ImageItemTypeIndex,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:MutilComboBoxControl},Path=ComboxBoxItemMouseOverBackground}" TargetName="border"></Setter>
                        </Trigger>
                        <Trigger Property="local:MutilComboBoxControl.IsDeletedContent" Value="True">
                            <Setter Property="IsChecked" Value="false" TargetName="cb"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true" SourceName="btn">
                            <Setter Property="local:MutilComboBoxControl.IsDeleteButtonPressed" Value="True"/>
                        </Trigger>

                        <!--默认 整个子项有作用-->
                        <Trigger Property="local:MutilComboBoxControl.SelectedType" Value="MutilItem">
                            <Setter Property="IsChecked" TargetName="cb"
                                                Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=IsSelected,Mode=TwoWay}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:MutilComboBoxControl.SelectedType" Value="MutilItem"></Condition>
                                <Condition Property="IsSelected" Value="true"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="local:MutilComboBoxControl.IsChecked" Value="True"/>
                            <!--<Setter Property="Background" Value="Red" TargetName="border"/>-->
                        </MultiTrigger>

                        <!--只有CheckBox有作用-->
                        <Trigger Property="local:MutilComboBoxControl.SelectedType" Value="OnlyCheckBox">
                            <Setter Property="IsChecked" TargetName="cb"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:MutilComboBoxControl.IsChecked),Mode=TwoWay}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="local:MutilComboBoxControl.SelectedType" Value="OnlyCheckBox"></Condition>
                                <Condition Property="IsSelected" Value="true"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="Green" TargetName="border"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--MutilComboBoxControl-->
    <Style TargetType="{x:Type local:MutilComboBoxControl}">
        <!--CustomComboBox背景色-->
        <Setter Property="Background" Value="{StaticResource backgroundColor}"></Setter>
        <!--CustomComboBox字体颜色-->
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="ItemsSource" Value="{x:Null}" />
        <Setter Property="IsEditable" Value="False"/> <!--不可编辑-->
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="6,0,0,0"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="ComboBoxListBackground" Value="LightSalmon"/>
        <Setter Property="ComboxBoxItemMouseOverBackground" Value="Salmon"/>
        <Setter Property="StrokeLineColor" Value="Green" />
        <Setter Property="ToggleButtonBackground" Value="Yellow"/>
        <Setter Property="local:MutilComboBoxControl.IsChecked" Value="False"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ItemContainer}"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MutilComboBoxControl}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="popupLoaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" ToolTip="{TemplateBinding ToolTip}">
                        <Grid x:Name="grid" SnapsToDevicePixels="True" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*"/>
                                <ColumnDefinition Width="0" MaxWidth="40" x:Name="delColumn"></ColumnDefinition>
                                <ColumnDefinition Width="3*" MaxWidth="40"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <!--<ContentControl x:Name="content" IsTabStop="False" IsHitTestVisible="False" VerticalAlignment="Center" Background="Blue"
                                            Content="{TemplateBinding local:MutilComboBoxControl.MutilComboBoxContent}"/>-->
                            <!--<ToggleButton x:Name="toggle" Grid.Column="1" Grid.ColumnSpan="2" Style="{StaticResource toggleButton}" Focusable="False" ClickMode="Press"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>-->

                            <UniformGrid Columns="2" Grid.Column="1" Grid.ColumnSpan="2" Height="{TemplateBinding Height}">
                                <ToggleButton x:Name="delToggleButton" Grid.Column="0" Style="{StaticResource delToggleButton}"
                                              IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:MutilComboBoxControl.IsDeletedContent),Mode=TwoWay}"
                                              Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=AddDeleteFun,Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <ToggleButton x:Name="toggle" Style="{StaticResource toggleButton}" Focusable="False" ClickMode="Press"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </UniformGrid>
                            <TextBox x:Name="PART_EditableTextBox" BorderThickness="0" VerticalAlignment="Center" Focusable="True"
                                     Background="Transparent" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False"
                                     Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Text,Mode=TwoWay}"
                                     IsReadOnly="{TemplateBinding IsReadOnly}" Padding="{TemplateBinding Padding}"/>
                            <Popup x:Name="PART_Popup" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" PopupAnimation="Slide" Placement="Bottom">
                                <Grid x:Name="TemplateRoot" Margin="50,0,50,50" RenderTransformOrigin="0.5,0.5">
                                    <Grid.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                                        </TransformGroup>
                                    </Grid.RenderTransform>
                                    <Rectangle Width="{Binding TemplatedParent}" Height="{Binding TemplatedParent}" Fill="{StaticResource {x:Static SystemColors.ActiveBorderBrushKey}}" RadiusX="5" RadiusY="5">
                                        <Rectangle.Effect>
                                            <DropShadowEffect BlurRadius="10" ShadowDepth="1" Direction="90" Color="Gray" Opacity="0.8"></DropShadowEffect>
                                        </Rectangle.Effect>
                                    </Rectangle>
                                    <Border x:Name="dropDownBorder" CornerRadius="5" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ElementName=grid,Path=Width}">
                                        <ListBox x:Name="dropDownListBox" SelectionMode="Multiple" ItemsSource="{TemplateBinding ItemsSource}"
                                                MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderThickness="0" BorderBrush="BlueViolet" 
                                                ItemTemplate="{TemplateBinding ItemTemplate}" 
                                                ItemContainerStyle="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ItemContainerStyle,Mode=TwoWay}"/>
                                        <!--ItemsSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(local:MutilComboBoxControl.ListItemsSource),Mode=TwoWay}"-->
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="AddDeleteFun" Value="True">
                            <Setter Property="Width" Value="1*" TargetName="delColumn"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter Property="CaretBrush" Value="white" TargetName="PART_EditableTextBox"/>
                            <Setter Property="IsHitTestVisible" Value="True" TargetName="PART_EditableTextBox"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true" SourceName="toggle">
                            <Setter Property="CornerRadius" Value="5,5,0,0" TargetName="border"></Setter>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="popupLoadedStoryBoard" Storyboard="{StaticResource popupLoaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="popupLoadedStoryBoard"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CustomComboBoxItem-->
    <Style TargetType="{x:Type local:CustomComboBoxItem}">
        <Setter Property="Padding" Value="5,0,0,0" />
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomComboBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Grid VerticalAlignment="Center" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*" />
                                <ColumnDefinition Width="2*" />
                            </Grid.ColumnDefinitions>
                            <!--Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomComboBoxItem},Path=Content}"-->
                            <Label Grid.Column="0" Content="{TemplateBinding Content}"  
                                   Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="Transparent"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <CheckBox x:Name="cb" Grid.Column="1" IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ItemCheckBoxIsChecked,Mode=TwoWay}"
                                      VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CustomIconControl-->
    <Style TargetType="{x:Type local:CustomIconControl}">
        <Setter Property="Background" Value="Green"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomIconControl}">
                    <Border Background="Transparent" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" 
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Border.RenderTransform>
                            <ScaleTransform ScaleX="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IconSizePercent}" 
                                            ScaleY="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IconSizePercent}"/>
                        </Border.RenderTransform>
                        <UserControl x:Name="userControl" Template="{StaticResource IconTemplate}" 
                                     Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="ExistEffect" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Effect" Value="{StaticResource effect}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>          
        </Setter>
    </Style>

    <!--CustomPasswordBox-->
    <Style TargetType="{x:Type local:CustomPasswordBox}">
        <Setter Property="IconSizePercent" Value="1.0"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="MaxLength" Value="15" />
        <Setter Property="PasswordPlaceHolder" Value="请输入密码"/>
        <Setter Property="IsEyeVisible" Value="False"/>
        <Setter Property="CornerRadius" Value="10"/>
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="BlueViolet"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomPasswordBox}">
                    <Border x:Name="border">
                        <Grid>
                            <PasswordBox x:Name="pb" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                                     BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" 
                                     Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" 
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource passwordbox}"                                       
                                     exposed:CustomPasswordBoxhelper.IsShowIcon="{TemplateBinding IsEyeVisible}"
                                     exposed:CustomPasswordBoxhelper.IconSizePercent="{TemplateBinding IconSizePercent}"
                                     exposed:CustomPasswordBoxhelper.IsTrigger="True"         
                                     exposed:CustomPasswordBoxhelper.Password="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Password,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"
                                     PasswordChar="{TemplateBinding PasswordChar}" MaxLength="{TemplateBinding MaxLength}">

                                <!--exposed:CustomPasswordBoxhelper.Password ="{Binding Path=Password,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"-->
                                <!--exposed:CustomPasswordBoxhelper.Password="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Password,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"-->
                                <!--<i:Interaction.Behaviors>
                                    <exposed:PasswordBoxBehavior></exposed:PasswordBoxBehavior>
                                </i:Interaction.Behaviors>-->
                            </PasswordBox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CustomTextControl-->
    <Style TargetType="{x:Type local:CustomTextControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
        <Setter Property="BorderBrush" Value="{StaticResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="TextPlaceHolder" Value="{x:Null}"></Setter>
        <Setter Property="ToolTip" Value="{x:Null}"></Setter>
        <Setter Property="InputMethod.IsInputMethodEnabled" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomTextControl}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" ToolTip="{TemplateBinding ToolTip}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                      IsHitTestVisible="{TemplateBinding IsHitTestVisible}" Foreground="{TemplateBinding Foreground}"></ScrollViewer>
                            <TextBlock x:Name="PART_PlaceHolder" Visibility="Collapsed" Text="{TemplateBinding TextPlaceHolder}" Foreground="{TemplateBinding Foreground}" Opacity="0.7" 
                                       FontSize="{TemplateBinding FontSize}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}"></TextBlock>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_PlaceHolder"></Setter>
                        </Trigger>
                        <Trigger Property="local:CustomTextControl.IsMatchRule" Value="false">
                            <Setter Property="BorderBrush" Value="Red"></Setter>
                            <Setter Property="BorderThickness" Value="2"></Setter>
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(local:CustomTextControl.WrongTextIndicate),Mode=TwoWay}"/>
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="Red"></Setter>
                            <Setter Property="BorderThickness" Value="2"></Setter>
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(Validation.Errors)[0].ErrorContent}"></Setter>
                        </Trigger>
                        <Trigger Property="TextInputType" Value="defaultText">
                            <Setter Property="InputMethod.IsInputMethodEnabled" Value="True"></Setter>
                        </Trigger>
                        <Trigger Property="TextInputType" Value="chinese">
                            <Setter Property="InputMethod.IsInputMethodEnabled" Value="True"></Setter>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="CaretBrush" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CustomProgressBar-->
    <Style TargetType="{x:Type local:CustomProgressBar}">
        <Setter Property="CornerRadius" Value="10"></Setter>
        <Setter Property="IsIndeterminate" Value="False"></Setter>
        <Setter Property="TextColor" Value="#FFFFFF"></Setter>
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="Padding" Value="5,0"></Setter>
        <Setter Property="SnapsToDevicePixels" Value="True"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomProgressBar}">
                    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard x:Name="HorizontalStoryboard" RepeatBehavior="Forever">
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0:0:0" Value="0.0,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="2.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        
                        <Grid>
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
                            <Border x:Name="PART_Track"/>
                            <Grid x:Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="width1"/>
                                    <ColumnDefinition x:Name="width2" Width="0"/>
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="Animation" RenderTransformOrigin="0.5,0.5">
                                    <Grid.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="180"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Grid.RenderTransform>
                                    <Border Background="{TemplateBinding Foreground}" CornerRadius="{TemplateBinding CornerRadius}">
                                        <Viewbox HorizontalAlignment="Left" StretchDirection="DownOnly" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                            <TextBlock Foreground="{TemplateBinding TextColor}" SnapsToDevicePixels="True" FontSize="{TemplateBinding FontSize}" VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                                       Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Value,StringFormat={}{0}%}" RenderTransformOrigin="0.5,0.5">
                                                <TextBlock.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                                        <SkewTransform AngleX="0" AngleY="0"/>
                                                        <RotateTransform Angle="0"/>
                                                        <TranslateTransform/>
                                                    </TransformGroup>
                                                </TextBlock.RenderTransform>
                                            </TextBlock>
                                        </Viewbox>
                                    </Border>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="#C5C5C5" TargetName="border"></Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Width" Value="0.25*" TargetName="width1"></Setter>
                            <Setter Property="Width" Value="0.75*" TargetName="width2"></Setter>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"></RotateTransform>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CustomSlider-->
    <Style x:Key="Slider_DecreaseRepeatButton" TargetType="RepeatButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=Foreground}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=DecreaseRepeatButtonCornerRadius}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Slider_IncreaseRepeatButton" TargetType="RepeatButton">
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=SliderBackground}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=IncreaseRepeatButtonCornerRadius}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Slider_Thumb" TargetType="{x:Type Thumb}">
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid VerticalAlignment="Center" Margin="{TemplateBinding Margin}">
                        <Ellipse x:Name="circle" 
                                 Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=ThumbSize}" 
                                 Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=ThumbSize}" 
                                 Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=ThumbBrush}"></Ellipse>
                        <Ellipse x:Name="ellipse" Width="20" Height="30"   
                                 Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=ThumbBrush}"></Ellipse>
                        <Rectangle x:Name="rec" Width="15" Height="30" 
                                   Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=ThumbBrush}"></Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="local:CustomSlider.Shape" Value="Circle">
                            <Setter Property="Visibility" Value="Visible" TargetName="circle"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ellipse"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="rec"></Setter>
                        </Trigger>
                        <Trigger Property="local:CustomSlider.Shape" Value="Ellipse">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="circle"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="ellipse"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="rec"></Setter>
                        </Trigger>
                        <Trigger Property="local:CustomSlider.Shape" Value="Rectangle">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="circle"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ellipse"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="rec"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:CustomSlider}">
        <Setter Property="SliderHeight" Value="10"></Setter>
        <Setter Property="SliderWidth" Value="10"></Setter>
        <Setter Property="SliderBackground" Value="#8D8D8D"></Setter>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="ShapeType" Value="Circle"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="IsMoveToPointEnabled" Value="True"></Setter>
        <Setter Property="Orientation" Value="Horizontal"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomSlider}">
                    <Grid>
                        <Border x:Name="TemplatedBorder" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" 
                                Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid x:Name="TemplatedGrid">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="width1"/>
                                    <ColumnDefinition x:Name="width2" Width="0"/>
                                </Grid.ColumnDefinitions>
                                <!--<Grid.Effect>
                                    <DropShadowEffect BlurRadius="10" ShadowDepth="1" Direction="90" Color="Gray" Opacity="0.9"></DropShadowEffect>
                                </Grid.Effect>-->
                                <!--<Border HorizontalAlignment="Right" BorderBrush="Gray" BorderThickness="1,1,0,1" Background="{StaticResource SliderText}" Width="80" CornerRadius="8,0,0,8"/>-->
                                <!--<TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Tag}" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="14"/>-->
                                <!--<Border Grid.Column="2" HorizontalAlignment="Right" BorderBrush="Gray" BorderThickness="0,1,1,1" Background="{StaticResource SliderText}" Width="40" CornerRadius="0,8,8,0"/>-->
                                <TextBlock Grid.Column="1" Text="{Binding ElementName=PART_Track,Path=Value,StringFormat=\{0:N0\}%}" Margin="10,0,0,0" 
                                           Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                           FontSize="14" DataContext="{Binding outputspeed}"/>
                                <Border x:Name="SliderBorder" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding SliderBackground}" 
                                        Height="{TemplateBinding SliderHeight}">
                                    <Track x:Name="PART_Track" Orientation="{TemplateBinding Orientation}">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton x:Name="decBtn" Style="{StaticResource Slider_DecreaseRepeatButton}" Command="Slider.DecreaseLarge" Background="Red"/>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton x:Name="incBtn" Style="{StaticResource Slider_IncreaseRepeatButton}" Command="Slider.IncreaseLarge"/>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb x:Name="thumb" Style="{StaticResource Slider_Thumb}" Margin="-1,-50,-1,-50"/>
                                        </Track.Thumb>
                                    </Track>
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShapeType" Value="Circle">
                            <Setter Property="local:CustomSlider.Shape" Value="Circle" TargetName="thumb"></Setter>
                        </Trigger>
                        <Trigger Property="ShapeType" Value="Rectangle">
                            <Setter Property="local:CustomSlider.Shape" Value="Rectangle" TargetName="thumb"></Setter>
                        </Trigger>
                        <Trigger Property="ShapeType" Value="Ellipse">
                            <Setter Property="local:CustomSlider.Shape" Value="Ellipse" TargetName="thumb"></Setter>
                        </Trigger>
                        <Trigger Property="SliderTextShow" Value="true">
                            <Setter Property="Width" Value="50" TargetName="width2"></Setter>
                            <Setter Property="Effect" Value="{x:Null}" TargetName="TemplatedGrid"></Setter>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Height}" TargetName="SliderBorder"></Setter>
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=SliderWidth}" TargetName="SliderBorder"></Setter>
                            <Setter Property="Margin" Value="-50,-1,-50,-1" TargetName="thumb"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:CustomPopupEx}">
        <Setter Property="Effect" Value="{StaticResource effect}"/>
    </Style>
    
    <!--ArrowLine-->
    <Style TargetType="{x:Type local:ArrowLine}">
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform Angle="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:ArrowLine},Path=(local:ArrowLine.RotateAngle)}" 
                                 CenterX="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:ArrowLine},Path=X1}" 
                                 CenterY="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:ArrowLine},Path=Y1}"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CoordinateSystem-->
    <Style TargetType="{x:Type local:CoordinateSystem}">
        <Setter Property="Stroke" Value="Red"/>
        <Setter Property="StrokeThickness" Value="2"/>
    </Style>

</ResourceDictionary>
