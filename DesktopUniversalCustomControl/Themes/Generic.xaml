<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:msgDlg="clr-namespace:DesktopUniversalCustomControl.CustomView.MsgDlg"
    xmlns:media="clr-namespace:DesktopUniversalCustomControl.CustomView.MediaView"
    xmlns:ctView="clr-namespace:DesktopUniversalCustomControl.CustomView"
    xmlns:local="clr-namespace:DesktopUniversalCustomControl.CustomComponent"
    xmlns:exposed="clr-namespace:DesktopUniversalCustomControl.ExposedMethod"
    xmlns:converter="clr-namespace:DesktopUniversalCustomControl.Service.Common">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/DesktopUniversalCustomControl;component/Resource/Dictionary/IconDictionary.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converter:ChartTypeToVisibility x:Key="ChartTypeToVisibility"/>
    <converter:MediaPlayerStateToVisibility x:Key="MediaPlayerStateToVisibility"/>
    <converter:DoubleToInt x:Key="DoubleToInt"/>

    <SolidColorBrush x:Key="foregroundColor" Color="BlueViolet"/>
    <LinearGradientBrush x:Key="backgroundColor">
        <GradientStop Offset="0.3" Color="LightSalmon"></GradientStop>
        <GradientStop Offset="0.6" Color="Orange"></GradientStop>
        <GradientStop Offset="0.9" Color="OrangeRed"></GradientStop>
    </LinearGradientBrush>
    <DropShadowEffect x:Key="effect" BlurRadius="10" ShadowDepth="1" Direction="90" Color="Gray"/>
    <OuterGlowBitmapEffect x:Key="bitmapEffect" GlowColor="DarkBlue" GlowSize="10" Opacity="0.7"/>

    <!--ToolTip-->
    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
        <Setter Property="MinWidth" Value="50"></Setter>
        <Setter Property="MinHeight" Value="30"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Background" Value="{StaticResource backgroundColor}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"
                            CornerRadius="5" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TextBlock-->
    <Style x:Key="textBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="50"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="SaddleBrown"/>
        <Setter Property="FontFamily" Value="微软雅黑"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Margin" Value="-25,0,0,0"/>
    </Style>

    <!--MediaPlayerView-->
    <Style TargetType="{x:Type local:MediaPlayerView}">
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Header="作者：Chance"/>
                    <MenuItem Header="版本：V1.0.0"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MediaPlayerView}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <media:UserMediaView  Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ChartControlView-->
    <Style TargetType="{x:Type local:ChartControlView}">
        <Setter Property="StrokeCoordinate" Value="Red"/>
        <Setter Property="StrokeThicknessCoordinate" Value="2"/>
        <Setter Property="XAxisDescription" Value="月份(年)"/>
        <Setter Property="YAxisDescription" Value="产量(kg)"/>
        <Setter Property="XAxisMargin" Value="0"/>
        <Setter Property="YAxisMargin" Value="-60,-5,0,0"/>
        <Setter Property="XTicksMargin" Value="-25,0,0,0"/>
        <Setter Property="YTicksMargin" Value="-40,-8,0,0"/>
        <Setter Property="ChartType" Value="PolyLine"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ChartControlView}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="roateStoryboard">
                            <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetName="Fangraph"
                                                           Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="360"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="TemplateRoot">
                            <Canvas x:Name="coordinateSystem">
                                <local:CoordinateSystem x:Name="coordinate" CenterPoint="{TemplateBinding CenterPoint}" XEndPoint="{TemplateBinding XEndPoint}" YEndPoint="{TemplateBinding YEndPoint}"
                                                    XCoordinateTicks="{TemplateBinding XCoordinateTicks}" YCoordinateTicks="{TemplateBinding YCoordinateTicks}"
                                                    Stroke="{TemplateBinding StrokeCoordinate}" StrokeThickness="{TemplateBinding StrokeThicknessCoordinate}"/>
                                <TextBlock Text="{TemplateBinding XAxisDescription}" FontSize="14" FontWeight="Bold" Foreground="White" Margin="{TemplateBinding XAxisMargin}"
                                           Canvas.Left="{Binding ElementName=coordinate,Path=XEndPoint.X}"
                                           Canvas.Top="{Binding ElementName=coordinate,Path=XEndPoint.Y}"/>
                                <TextBlock Text="{TemplateBinding YAxisDescription}" FontSize="14" FontWeight="Bold" Foreground="White" Margin="{TemplateBinding YAxisMargin}"
                                           Canvas.Left="{Binding ElementName=coordinate,Path=YEndPoint.X}"
                                           Canvas.Top="{Binding ElementName=coordinate,Path=YEndPoint.Y}"/>
                            </Canvas>
                            <!--X轴刻度描述-->
                            <Canvas x:Name="xTicks">
                                <!--<TextBlock Canvas.Left="{Binding ElementName=coordinate,Path=XTicks[0].X}" Canvas.Top="{Binding ElementName=coordinate,Path=XTicks[0].Y}" 
                                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=XTickDescription[0]}" Style="{StaticResource textBlock}"
                                           Margin="{TemplateBinding XTicksMargin}"/>-->
                            </Canvas>
                            <!--Y轴刻度描述-->
                            <Canvas x:Name="yTicks">
                                <!--<TextBlock Canvas.Left="{Binding ElementName=coordinate,Path=YTicks[0].Y}" Canvas.Top="{Binding ElementName=coordinate,Path=YTicks[0].Y}" 
                                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=YTickDescription[0]}" Style="{StaticResource textBlock}"
                                           Margin="{TemplateBinding YTicksMargin}"/>-->
                            </Canvas>
                            <!--画图-->
                            <Canvas x:Name="drawChart">
                                <Polyline x:Name="PolyLine" Points="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ChartNewDataCollection}" 
                                          Stroke="{TemplateBinding StrokeCoordinate}" StrokeThickness="{TemplateBinding StrokeThicknessCoordinate}"
                                          Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ChartType,
                                                        Converter={StaticResource ChartTypeToVisibility},ConverterParameter=PolyLineMap}"/>
                                
                                <Path x:Name="Histogram" Fill="{TemplateBinding StrokeCoordinate}" 
                                      Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ChartType,
                                                  Converter={StaticResource ChartTypeToVisibility},ConverterParameter=HistogramMap}"/>
                                <Canvas x:Name="otherHistogram" Visibility="{Binding ElementName=Histogram,Path=Visibility}"/>

                                <Canvas x:Name="Fangraph" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ChartType,
                                                                       Converter={StaticResource ChartTypeToVisibility},ConverterParameter=FangraphMap}">
                                    <Canvas.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <RotateTransform CenterX="300" CenterY="300"/>
                                            <SkewTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Canvas.RenderTransform>
                                </Canvas>
                                <!--<Canvas x:Name="otherFangraph" Visibility="{Binding ElementName=Fangraph,Path=Visibility}"/>-->                                
                            </Canvas>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="Loaded">
                            <BeginStoryboard x:Name="startRoateStoryboard" Storyboard="{StaticResource roateStoryboard}"/>
                        </EventTrigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Fangraph">
                            <Trigger.EnterActions>
                                <PauseStoryboard BeginStoryboardName="startRoateStoryboard"></PauseStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False" SourceName="Fangraph">
                            <Trigger.EnterActions>
                                <ResumeStoryboard BeginStoryboardName="startRoateStoryboard"></ResumeStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--轮播控件-->
    <Style TargetType="{x:Type local:CarouselControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CarouselControl}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Canvas x:Name="imgCanvas" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                                Background="{TemplateBinding Background}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonBase" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="BlueViolet"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border Background="{TemplateBinding Background}">
                        <TextBlock Text="{TemplateBinding Content}" FontSize="16" VerticalAlignment="Center" IsHitTestVisible="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--输入法选择控件-->
    <Style TargetType="{x:Type local:InputMethodView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:InputMethodView}">
                    <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" CornerRadius="5">
                        <Grid x:Name="RootGrid" Width="{TemplateBinding Width}">
                            <StackPanel Orientation="Horizontal" x:Name="sp">
                                <ToggleButton x:Name="langSelect" Content="{TemplateBinding CurrentVisibleInputMethod}" Style="{StaticResource ButtonBase}" Margin="0,0,10,0"/>
                                <Button x:Name="languageExange" Content="中&lt;=&gt;英" Visibility="{TemplateBinding LanguageExangeButton}" Style="{StaticResource ButtonBase}"/>
                            </StackPanel>
                            <local:CustomPopupEx x:Name="cpe" IsOpen="{Binding ElementName=langSelect,Path=IsChecked,Mode=TwoWay}" StaysOpen="False"
                                                  Placement="Bottom" PlacementTarget="{Binding ElementName=sp}" PopupAnimation="Slide">
                                <Grid>
                                    <ListView x:Name="lv" SelectedIndex="0" Width="{TemplateBinding Width}">
                                        <ListView.ItemContainerStyle>
                                            <Style TargetType="{x:Type ListViewItem}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                            <Border Width="{TemplateBinding Width}" Height="30">
                                                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                                                    <TextBlock x:Name="tb" Width="30"
                                                                               Foreground="BlueViolet" FontSize="16" Visibility="Hidden"/>
                                                                    <TextBlock Text="{TemplateBinding Content}" Foreground="BlueViolet"/>
                                                                </StackPanel>
                                                            </Border>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsSelected" Value="True">
                                                                    <Setter Property="Text" Value="√" TargetName="tb"/>
                                                                    <Setter Property="Visibility" Value="Visible" TargetName="tb"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ListView.ItemContainerStyle>
                                    </ListView>
                                </Grid>
                            </local:CustomPopupEx>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CustomComboBoxItem-->
    <Style TargetType="{x:Type local:CustomComboBoxItem}">
        <Setter Property="Padding" Value="5,0,0,0" />
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomComboBoxItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Grid VerticalAlignment="Center" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*" />
                                <ColumnDefinition Width="2*" />
                            </Grid.ColumnDefinitions>
                            <!--Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomComboBoxItem},Path=Content}"-->
                            <Label Grid.Column="0" Content="{TemplateBinding Content}"  
                                   Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="Transparent"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <CheckBox x:Name="cb" Grid.Column="1" IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ItemCheckBoxIsChecked,Mode=TwoWay}"
                                      VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="Hidden"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CustomIconControl-->
    <Style TargetType="{x:Type local:CustomIconControl}">
        <Setter Property="Background" Value="Green"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomIconControl}">
                    <Border Background="Transparent" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" 
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Border.RenderTransform>
                            <ScaleTransform ScaleX="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IconSizePercent}" 
                                            ScaleY="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IconSizePercent}"/>
                        </Border.RenderTransform>
                        <UserControl x:Name="userControl" Template="{StaticResource IconTemplate}" 
                                     Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true"/>
                                <Condition Property="ExistEffect" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Effect" Value="{StaticResource effect}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CustomProgressBar-->
    <Style TargetType="{x:Type local:CustomProgressBar}">
        <Setter Property="CornerRadius" Value="10"></Setter>
        <Setter Property="IsIndeterminate" Value="False"></Setter>
        <Setter Property="TextColor" Value="#FFFFFF"></Setter>
        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}"/>
        <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="Padding" Value="5,0"></Setter>
        <Setter Property="SnapsToDevicePixels" Value="True"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomProgressBar}">
                    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="True">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard x:Name="HorizontalStoryboard" RepeatBehavior="Forever">
                                        <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                            <EasingPointKeyFrame KeyTime="0:0:0" Value="0.0,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="2.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        
                        <Grid>
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
                            <Border x:Name="PART_Track"/>
                            <Grid x:Name="PART_Indicator" ClipToBounds="True" HorizontalAlignment="Left">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="width1"/>
                                    <ColumnDefinition x:Name="width2" Width="0"/>
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="Animation" RenderTransformOrigin="0.5,0.5">
                                    <Grid.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="-1"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="180"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Grid.RenderTransform>
                                    <Border Background="{TemplateBinding Foreground}" CornerRadius="{TemplateBinding CornerRadius}">
                                        <Viewbox HorizontalAlignment="Left" StretchDirection="DownOnly" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                            <TextBlock Foreground="{TemplateBinding TextColor}" SnapsToDevicePixels="True" FontSize="{TemplateBinding FontSize}" VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                                       Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Value,StringFormat={}{0}%}" RenderTransformOrigin="0.5,0.5">
                                                <TextBlock.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                                        <SkewTransform AngleX="0" AngleY="0"/>
                                                        <RotateTransform Angle="0"/>
                                                        <TranslateTransform/>
                                                    </TransformGroup>
                                                </TextBlock.RenderTransform>
                                            </TextBlock>
                                        </Viewbox>
                                    </Border>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="#C5C5C5" TargetName="border"></Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Width" Value="0.25*" TargetName="width1"></Setter>
                            <Setter Property="Width" Value="0.75*" TargetName="width2"></Setter>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"></RotateTransform>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CustomSlider-->
    <Style x:Key="Slider_DecreaseRepeatButton" TargetType="RepeatButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=Foreground}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=DecreaseRepeatButtonCornerRadius}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Slider_IncreaseRepeatButton" TargetType="RepeatButton">
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=SliderBackground}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=IncreaseRepeatButtonCornerRadius}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Slider_Thumb" TargetType="{x:Type Thumb}">
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid VerticalAlignment="Center" Margin="{TemplateBinding Margin}">
                        <Ellipse x:Name="circle" 
                                 Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=ThumbSize}" 
                                 Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=ThumbSize}" 
                                 Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=ThumbBrush}"></Ellipse>
                        <Ellipse x:Name="ellipse" Width="20" Height="30"   
                                 Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=ThumbBrush}"></Ellipse>
                        <Rectangle x:Name="rec" Width="15" Height="30" 
                                   Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:CustomSlider},Path=ThumbBrush}"></Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="local:CustomSlider.Shape" Value="Circle">
                            <Setter Property="Visibility" Value="Visible" TargetName="circle"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ellipse"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="rec"></Setter>
                        </Trigger>
                        <Trigger Property="local:CustomSlider.Shape" Value="Ellipse">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="circle"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="ellipse"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="rec"></Setter>
                        </Trigger>
                        <Trigger Property="local:CustomSlider.Shape" Value="Rectangle">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="circle"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ellipse"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="rec"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:CustomSlider}">
        <Setter Property="SliderHeight" Value="10"></Setter>
        <Setter Property="SliderWidth" Value="10"></Setter>
        <Setter Property="SliderBackground" Value="#8D8D8D"></Setter>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="CornerRadius" Value="5"/>
        <Setter Property="ShapeType" Value="Circle"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="IsMoveToPointEnabled" Value="True"></Setter>
        <Setter Property="Orientation" Value="Horizontal"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomSlider}">
                    <Grid>
                        <Border x:Name="TemplatedBorder" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}" 
                                Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid x:Name="TemplatedGrid">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="width1"/>
                                    <ColumnDefinition x:Name="width2" Width="0"/>
                                </Grid.ColumnDefinitions>
                                <!--<Grid.Effect>
                                    <DropShadowEffect BlurRadius="10" ShadowDepth="1" Direction="90" Color="Gray" Opacity="0.9"></DropShadowEffect>
                                </Grid.Effect>-->
                                <!--<Border HorizontalAlignment="Right" BorderBrush="Gray" BorderThickness="1,1,0,1" Background="{StaticResource SliderText}" Width="80" CornerRadius="8,0,0,8"/>-->
                                <!--<TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Tag}" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="14"/>-->
                                <!--<Border Grid.Column="2" HorizontalAlignment="Right" BorderBrush="Gray" BorderThickness="0,1,1,1" Background="{StaticResource SliderText}" Width="40" CornerRadius="0,8,8,0"/>-->
                                <TextBlock Grid.Column="1" Text="{Binding ElementName=PART_Track,Path=Value,StringFormat=\{0:N0\}%}" Margin="10,0,0,0" 
                                           Foreground="{TemplateBinding Foreground}" VerticalAlignment="Center" HorizontalAlignment="Center" 
                                           FontSize="14" DataContext="{Binding outputspeed}"/>
                                <Border x:Name="SliderBorder" CornerRadius="{TemplateBinding CornerRadius}" Background="{TemplateBinding SliderBackground}" 
                                        Height="{TemplateBinding SliderHeight}">
                                    <Track x:Name="PART_Track" Orientation="{TemplateBinding Orientation}">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton x:Name="decBtn" Style="{StaticResource Slider_DecreaseRepeatButton}" Command="Slider.DecreaseLarge" Background="Red"/>
                                        </Track.DecreaseRepeatButton>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton x:Name="incBtn" Style="{StaticResource Slider_IncreaseRepeatButton}" Command="Slider.IncreaseLarge"/>
                                        </Track.IncreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb x:Name="thumb" Style="{StaticResource Slider_Thumb}" Margin="-1,-50,-1,-50"/>
                                        </Track.Thumb>
                                    </Track>
                                </Border>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShapeType" Value="Circle">
                            <Setter Property="local:CustomSlider.Shape" Value="Circle" TargetName="thumb"></Setter>
                        </Trigger>
                        <Trigger Property="ShapeType" Value="Rectangle">
                            <Setter Property="local:CustomSlider.Shape" Value="Rectangle" TargetName="thumb"></Setter>
                        </Trigger>
                        <Trigger Property="ShapeType" Value="Ellipse">
                            <Setter Property="local:CustomSlider.Shape" Value="Ellipse" TargetName="thumb"></Setter>
                        </Trigger>
                        <Trigger Property="SliderTextShow" Value="true">
                            <Setter Property="Width" Value="50" TargetName="width2"></Setter>
                            <Setter Property="Effect" Value="{x:Null}" TargetName="TemplatedGrid"></Setter>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Height}" TargetName="SliderBorder"></Setter>
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=SliderWidth}" TargetName="SliderBorder"></Setter>
                            <Setter Property="Margin" Value="-50,-1,-50,-1" TargetName="thumb"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:CustomPopupEx}">
        <Setter Property="Effect" Value="{StaticResource effect}"/>
    </Style>
    
    <!--ArrowLine-->
    <Style TargetType="{x:Type local:ArrowLine}">
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform Angle="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:ArrowLine},Path=(local:ArrowLine.RotateAngle)}" 
                                 CenterX="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:ArrowLine},Path=X1}" 
                                 CenterY="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:ArrowLine},Path=Y1}"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CoordinateSystem-->
    <Style TargetType="{x:Type local:CoordinateSystem}">
        <Setter Property="Stroke" Value="Red"/>
        <Setter Property="StrokeThickness" Value="2"/>
    </Style>

</ResourceDictionary>
