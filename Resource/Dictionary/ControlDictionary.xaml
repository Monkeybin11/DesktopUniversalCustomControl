<ResourceDictionary x:Class="CustomControl.Resource.Dictionary.DictionaryEvent"  
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"                 
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:transition="clr-namespace:CustomControl.Resource.Transitions"
                    xmlns:converter="clr-namespace:CustomControl.Service.Common"
                    xmlns:component="clr-namespace:CustomControl.CustomComponent"
                    xmlns:exposed="clr-namespace:CustomControl.ExposedMethod">

    <SolidColorBrush x:Key="foregroundColor" Color="Orange"></SolidColorBrush>
    <LinearGradientBrush x:Key="backgroundColor">
        <GradientStop Offset="0.3" Color="LightSalmon"></GradientStop>
        <GradientStop Offset="0.6" Color="Orange"></GradientStop>
        <GradientStop Offset="0.9" Color="OrangeRed"></GradientStop>
    </LinearGradientBrush>
    <DropShadowEffect x:Key="effect" BlurRadius="10" ShadowDepth="1" Direction="90" Color="Gray"></DropShadowEffect>
    <OuterGlowBitmapEffect x:Key="bitmapEffect" GlowColor="DarkBlue" GlowSize="10" Opacity="0.7"></OuterGlowBitmapEffect>


    <!--ToolTipTemplate-->
    <ControlTemplate x:Key="toolTipTemplate" TargetType="{x:Type ToolTip}">
        <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"
                            CornerRadius="5" Background="{TemplateBinding Background}">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Opacity="0.8"/>
        </Border>
    </ControlTemplate>


    <!--转换器-->
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"></BooleanToVisibilityConverter>
    <converter:MediaPlayerStateToVisibility x:Key="MediaPlayerStateToVisibility"></converter:MediaPlayerStateToVisibility>
    <converter:DoubleToInt x:Key="DoubleToInt"></converter:DoubleToInt>
    <converter:DoubleToTimeSpan x:Key="DoubleToTimeSpan"></converter:DoubleToTimeSpan>
    <converter:SelectedItemToString x:Key="SelectedItemToString"></converter:SelectedItemToString>


    <!--FocusVisualStyle-->
    <Style x:Key="SwitchFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="10,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="2" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
   
    <!--ContentControl-->
    <Style x:Key="contentControl" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" 
                            >
                        <!--MouseLeftButtonDown="MouseLeftButtonPoint" MouseLeftButtonUp="MouseLeftButtonPointClear"-->
                        <Grid>
                            <ContentPresenter />
                            <Canvas x:Name="canvas"></Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window-->
    <Style x:Key="window" TargetType="Window">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Margin="5">
                        <Rectangle Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" RadiusX="10" RadiusY="10">
                            <Rectangle.Effect>
                                <DropShadowEffect BlurRadius="10" ShadowDepth="1" Direction="90" Color="Gray"></DropShadowEffect>
                            </Rectangle.Effect>
                        </Rectangle>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                                                CornerRadius="10" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ContentPresenter/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Button-->
    <Style x:Key="button" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource foregroundColor}"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="loaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(ScaleTransform.ScaleX)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(ScaleTransform.ScaleY)" Storyboard.TargetName="TemplateRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="TemplateRoot" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform X="0" Y="0"></TranslateTransform>
                                <RotateTransform Angle="0"></RotateTransform>
                                <SkewTransform AngleX="0" AngleY="0"></SkewTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Mode=Self}}">
                            <Grid>
                                <Border x:Name="border" CornerRadius="5" Background="{StaticResource backgroundColor}">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </Grid>
                        </AdornerDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Effect" Value="{StaticResource effect}"></Setter>
                            <Setter Property="Background" Value="{StaticResource backgroundColor}"></Setter>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Effect" Value="{StaticResource effect}"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="defaultStoryboardLoaed" Storyboard="{StaticResource loaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="defaultStoryboardLoaed"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ToolTip-->
    <Style x:Key="toolTip" TargetType="{x:Type ToolTip}">
        <Setter Property="MinWidth" Value="50"></Setter>
        <Setter Property="MinHeight" Value="30"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Background" Value="{StaticResource backgroundColor}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"
                            CornerRadius="5" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TooggleButton 倒三角-->
    <Style x:Key="toggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="loaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                            </TransformGroup>
                        </Border.RenderTransform>
                        <Border.CornerRadius>
                            <CornerRadius TopRight="5" BottomRight="5"></CornerRadius>
                        </Border.CornerRadius>
                        <Path Data="M 0,0 L 30,0 L 15,15 Z" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:CustomComboBox},Path=ToggleButtonBackground}" HorizontalAlignment="Center" VerticalAlignment="Center"></Path>
                    </Border> 
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" Value="0" TargetName="border"></Setter>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="defaultStoryBoard" Storyboard="{StaticResource loaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="defaultStoryBoard"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="Hand"></Setter>
                            <Setter Property="BitmapEffect">
                                <Setter.Value>
                                    <DropShadowBitmapEffect ShadowDepth="1" Softness="0.5" Opacity="0.6" Color="Gray"></DropShadowBitmapEffect>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TooggleButton 删除按钮-->
    <Style x:Key="delToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="loaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"></EasingDoubleKeyFrame>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"></EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"></ScaleTransform>
                            </TransformGroup>
                        </Border.RenderTransform>
                        <!--{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:CustomComboBox},Path=ToggleButtonBackground}-->
                        <Canvas VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Canvas.RenderTransform>
                                <RotateTransform Angle="45"></RotateTransform>
                            </Canvas.RenderTransform>
                            <Path Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:MutilComboBoxControl},Path=ToggleButtonBackground}">
                                <Path.Data>
                                    <EllipseGeometry  RadiusX="12" RadiusY="12"></EllipseGeometry>
                                </Path.Data>
                            </Path>
                            <Path Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:MutilComboBoxControl},Path=StrokeLineColor}" StrokeThickness="2">
                                <Path.Data>
                                    <LineGeometry StartPoint="-12,0" EndPoint="12,0"></LineGeometry>
                                </Path.Data>
                            </Path>
                            <Path Stroke="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:MutilComboBoxControl},Path=StrokeLineColor}" StrokeThickness="2">
                                <Path.Data>
                                    <LineGeometry StartPoint="0,-12" EndPoint="0,12"></LineGeometry>
                                </Path.Data>
                            </Path>
                            <!--<Path Data="M 0,0 L 8,8 Z M 0,8 L 8,0 Z" Stroke="White" StrokeThickness="3" HorizontalAlignment="Center" VerticalAlignment="Center"/>-->
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" Value="0" TargetName="border"></Setter>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="defaultStoryBoard" Storyboard="{StaticResource loaded}"></BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="defaultStoryBoard"></RemoveStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Cursor" Value="Hand"></Setter>
                            <Setter Property="BitmapEffect">
                                <Setter.Value>
                                    <DropShadowBitmapEffect ShadowDepth="1" Softness="0.5" Opacity="0.2" Color="Gray"></DropShadowBitmapEffect>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ComboBox-->
    <Style x:Key="comboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}">
                    <Setter Property="Height" Value="40"></Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <Border x:Name="border">
                                    <StackPanel Orientation="Vertical">
                                        <ContentPresenter Content="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" VerticalAlignment="Center" />
                                        <Line Width="{TemplateBinding Width}" Stroke="White" StrokeThickness="1"/>
                                    </StackPanel>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" Value="Orange" TargetName="border"></Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Border SnapsToDevicePixels="True" Background="{TemplateBinding Background}" CornerRadius="5">
                        <Grid x:Name="grid" SnapsToDevicePixels="True" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="50" MaxWidth="50"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Content="{TemplateBinding SelectionBoxItem}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="{TemplateBinding Padding}"
                                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"></ContentPresenter>
                            <TextBox x:Name="PART_EditableTextBox" Visibility="Hidden" Grid.Column="0" Foreground="{TemplateBinding Foreground}" IsReadOnly="{TemplateBinding IsReadOnly}"></TextBox>
                            <ToggleButton x:Name="toggle" Grid.Column="1" Style="{StaticResource toggleButton}" Focusable="False"
                                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"></ToggleButton>
                            <Popup Grid.Column="0" Grid.ColumnSpan="2" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True"
                                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                <Border x:Name="dropDownBorder" BorderBrush="Orange" BorderThickness="1" Background="BlueViolet"
                                                    MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ElementName=grid,Path=ActualWidth}">
                                    <ScrollViewer x:Name="dropDownScrollViewer" CanContentScroll="True" SnapsToDevicePixels="True" 
                                                              VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                                        <!--<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Background="WhiteSmoke"></StackPanel>-->
                                        <ItemsPresenter x:Name="itemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"></ItemsPresenter>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--CustomPasswordBox-->
    <Style x:Key="passwordbox" TargetType="{x:Type PasswordBox}">
        <Setter Property="BorderBrush" Value="#F00"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="Times New Roman"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:CustomPasswordBox},Path=CornerRadius}"
                            Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:CustomPasswordBox},Path=Background}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="30" MaxWidth="40"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ScrollViewer.CanContentScroll="True"
                                          Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:CustomPasswordBox},Path=Foreground}"/>
                            <TextBlock x:Name="PART_PlaceHolder" Text="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:CustomPasswordBox},Path=PasswordPlaceHolder,Mode=OneWay}" Foreground="LightGray" FontSize="14" Visibility="Collapsed" SnapsToDevicePixels="True" VerticalAlignment="Center"></TextBlock>
                            <component:CustomTextControl x:Name="visiblePassword" Visibility="Collapsed" Text="{TemplateBinding exposed:CustomPasswordBoxhelper.Password}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                         Background="Transparent" InputMethod.IsInputMethodEnabled="False" TextChanged="VisiblePassword_TextChanged" BorderThickness="0" Focusable="True" MaxLength="{TemplateBinding MaxLength}"
                                                         Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:CustomPasswordBox},Path=Foreground}"></component:CustomTextControl>
                            <!--<materialDesign:PackIcon x:Name="eye" Grid.Column="1" Kind="Lock" Width="25" Height="25" MouseLeftButtonDown="Eye_MouseLeftButtonDown" VerticalAlignment="Center" 
                                                     Visibility="{TemplateBinding exposed:CustomPasswordBoxhelper.IsShowIcon,Converter={StaticResource BooleanToVisibilityConverter}}" Background="Transparent"                                      
                                                     Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:CustomPasswordBox},Path=Foreground}"></materialDesign:PackIcon>-->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="exposed:CustomPasswordBoxhelper.Password" Value="{x:Null}">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_PlaceHolder"></Setter>
                        </Trigger>
                        <Trigger Property="exposed:CustomPasswordBoxhelper.Password" Value="">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_PlaceHolder"></Setter>
                        </Trigger>
                        <Trigger Property="exposed:CustomPasswordBoxhelper.IsShowPassword" Value="true">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_ContentHost"></Setter>
                            <Setter Property="Visibility" Value="Visible" TargetName="visiblePassword"></Setter>
                            <!--<Setter Property="Kind" Value="Eye" TargetName="eye"></Setter>-->
                        </Trigger>
                        <Trigger Property="exposed:CustomPasswordBoxhelper.IsShowPassword" Value="false">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_ContentHost"></Setter>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="visiblePassword"></Setter>
                            <!--<Setter Property="Kind" Value="Lock" TargetName="eye"></Setter>-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--TextBlock-->
    <Style x:Key="textBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="50"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontFamily" Value="微软雅黑"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Margin" Value="-25,0,0,0"/>
    </Style>

    <Style x:Key="CheckItemStyle" TargetType="{x:Type ListBoxItem}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}" >
                    <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:MutilComboBoxControl},Path=ComboBoxListBackground}">
                        <Grid VerticalAlignment="Center" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*" />
                                <ColumnDefinition Width="2*" />
                            </Grid.ColumnDefinitions>
                            <Label x:Name="lb" Grid.Column="0" Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content}" 
                                               Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="Transparent"
                                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <CheckBox x:Name="cb" Grid.Column="1"
                                                  IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(component:MutilComboBoxControl.IsChecked),Mode=TwoWay}"
                                                  VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=component:MutilComboBoxControl},Path=ComboxBoxItemMouseOverBackground}" TargetName="border"></Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true" SourceName="cb">
                            <Setter Property="component:MutilComboBoxControl.MutilComboBoxContent" Value="{StaticResource (component:MutilComboBoxControl.textMutil)}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <!--<Border x:Name="Border" Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <CheckBox IsChecked="{Binding Path=IsSelected,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay}">
                                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </CheckBox>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        --><!--<Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource ItemSelectedBackground}" />
                            <Setter Property="Foreground" Value="{StaticResource ItemSelectedForeground}" />
                        </Trigger>--><!--
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="Red" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity" Value="0.8" />
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>